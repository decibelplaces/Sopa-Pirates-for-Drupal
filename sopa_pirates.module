<?php

/**
 * Implementation of hook_help().
 */
function sopa_pirates_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pirate':
      return t("Avast ye scurvy dogs!");
  }
}

/**
 * Implementation of hook_filter().
 */
function sopa_pirates_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('SOPA Pirates filter'));
    case 'description':
      return t('Ah, MPAA! I got nothing against ye. I just heard there was gold in yer belly. Ha ha har, ha ha ha har!');
    case 'settings': 
      return _sopa_pirates_filter_settings();
    case 'process': 
      if (preg_match("/SOPA|Sopa|sopa|PIPA|Pipa|pipa/",$text)){
      // Invoke hook_captain(). Also allows other modules to alter our patterns.
      // Cache must be flushed for invocations of this hook to be felt.
      $patterns = array();
      //$patterns = module_invoke_all('captain', $patterns);
      $patterns = sopa_pirates_captain($patterns);

      // Most of the following code is taken from Drupal 7 core's Filter module
      // in order to exclude text within tags, such as URLs that might get 
      // modified using the replacement patterns.
      $ignore_tags = 'a|script|style|code|pre';
      $open_tag = '';
      $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
      foreach ($patterns as $pattern_search => $pattern_replace) {
        $chunk_type = 'text';
        for ($i = 0; $i < count($chunks); $i++) {
          if ($chunk_type == 'text') {
            // Only process this text if there are no unclosed $ignore_tags.
            if ($open_tag == '') {
            // If there is a match, inject a link into this chunk via the callback
            // function contained in $task.
              $chunks[$i] = preg_replace($pattern_search, $pattern_replace, $chunks[$i]);
            }
            // Text chunk is done, so next chunk must be a tag.
            $chunk_type = 'tag';
          }
          else {
            // Only process this tag if there are no unclosed $ignore_tags.
            if ($open_tag == '') {
            // Check whether this tag is contained in $ignore_tags.
              if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
                $open_tag = $matches[1];
              }
            }
            // Otherwise, check whether this is the closing tag for $open_tag.
            else {
              if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
                $open_tag = '';
              }
            }
            // Tag chunk is done, so next chunk must be text.
            $chunk_type = 'text';
          }
        }
        $text = implode($chunks);
      }
      }
      $text .= "<h5>Pirate Translation provided by <a href='https://github.com/decibelplaces/Sopa-Pirates-for-Drupal' target='_blank'>SOPA Pirates for Drupal Module</a></h5>";
      return $text;
    default:  
      return $text;
  }
}

/**
 * Implement hook_captain().
 */
function sopa_pirates_captain($patterns) {
  $sopa_pirates_patterns = array( 
    '%\b[Cc]ongress\b%' => "crimey Cap'ns of Congress",
    '%\b[Ss]enator\b%' => "stinkin' Senatorial Sargasso",
    '%\b[Ss]enate\b%' => "Snake-pit",
    '%\b[Hh]ouse\b%' => "Hoosic'",
    '%\b[Rr]epresentative\b%' => "rolling Rich Repeater",
    '%\b[Cc]ommittee\b%' => "crimey Meetin' Mavens",
    '%\b[Cc]apitalism\b%' => "crabby rattling Cutlass-ism",
    '%\b[Gg]overnment\b%' => "greasy Gulli'ment",
    '%\b[Jj]udiciary\b%' => "Judges 'o' scallywags",
    '%\b[Rr]epublican\b%' => "Re'plundrican",
    '%\b[Dd]emocrat\b%' => "Salty Dog 'r Cat",
    '%\b[Dd]emocratic\b%' => "Salty Dog 'n th' Cattic",
    '%\bMPAA\b%' => 'those MPAA barnacle dogs',
    '%\bmpaa\b%' => 'those MPAA barnacle dogs',
    '%\bprotesters\b%' => 'blimey SOPA PIRATES',
    '%\bpirates\b%' => 'blimey SOPA PIRATES',
    '%\b[Pp]iracy\b%' => 'spred the booty to the Pirate 99%',
    '%\b[Ii][Pp]\b%' => 'Ineffectual Piracy',
    '%\b[Ii]ntellectual [Pp]roperty\b%' => 'Ineffectual Propaganda',
    '%\bSOPA\b%' => 'that scurvey SOPA treaty',
    '%\bsopa\b%' => 'that scurvey SOPA treaty',
    '%\bPIPA\b%' => 'that putrid PIPA treaty',
    '%\bpipa\b%' => 'that putrid PIPA treaty',
    '%\b[Pp]eople\b%' => "th' othr' 99%",
    '%\b[Cc]opyright\b%' => "copy-left 'n then sum",
    '%\b[Mm]ovie [Ss]tudio\b%' => "Measly Stuntoo",
    '%\b[Rr]ecord [Ll]abel\b%' => "Rip-Cord La Belle",
    '%\b[Cc]ompany\b%' => "Conspira-cy",
    '%\b[Cc]ompanies\b%' => "Conspira-cies",
    '%\b[Jj]udgment\b%' => "Walk 'o' th' Plank",
    '%\b[Ff]ine\b%' => "Brine",
    
    '%\bmy\b%' => 'me',
    '%\bboss\b%' => 'admiral',
    '%\bmanager\b%' => 'admiral',
    '%\b[Cc]aptain\b%' => "Cap'n",
    '%\bmyself\b%' => 'meself',
    '%\byour\b%' => 'yer',
    '%\byou\b%' => 'ye',
    '%\bfriend\b%' => 'matey',
    '%\bfriends\b%' => 'maties',
    '%\bco[-]?worker\b%' => 'shipmate',
    '%\bco[-]?workers\b%' => 'shipmates',
    
    '%\bearlier\b%' => 'afore',
    '%\bold\b%' => 'auld',
    '%\bthe\b%' => "th'",
    '%\bof\b%' =>  "o'",
    "%\bdon't\b%" => "dern't",
    '%\bdo not\b%' => "dern't",
    '%\bnever\b%' => "no nay ne'er",
    '%\bever\b%' => "e'er",
    '%\bover\b%' => "o'er",
    '%\bYes\b%' => 'Aye',
    '%\bNo\b%' => 'Nay',
    '%\bYeah\b%' => 'Aye',
    '%\byeah\b%' => 'aye',
    '%\bare\b%' => 'be',
    '%\bDrupalists\b%' => 'Bucaneers',
    '%\bthere\b%' => 'thar',
    '%b\bnot\b%' => 'nay',
    '%\bdesign\b%' => 'bounty',
    '%\bonline\b%' => 'on the plank',
    '/and\b/' => "an'",
    '/ious\b/' => "i'us",
    "%\bdon't know\b%" => "dinna",
    "%\bdidn't know\b%" => "did nay know",
    "%\bhadn't\b%" => "ha'nae",
    "%\bdidn't\b%" =>  "di'nae",
    "%\bwasn't\b%" => "weren't",
    "%\bhaven't\b%" => "ha'nae",
    '%\bfor\b%' => 'fer',
    '%\bbetween\b%' => 'betwixt',
    '%\baround\b%' => "aroun'",
    '%\bto\b%' => "t'",
    "%\bit's\b%" => "'tis",
    '%\bwoman\b%' => 'wench',
    '%\bwomen\b%' => 'wenches',
    '%\blady\b%' => 'wench',
    '%\bwife\b%' => 'lady',
    '%\bgirl\b%' => 'lass',
    '%\bgirls\b%' => 'lassies',
    '%\bguy\b%' => 'lubber',
    '%\bman\b%' => 'lubber',
    '%\bfellow\b%' => 'lubber',
    '%\bdude\b%' => 'lubber',
    '%\bboy\b%' => 'lad',
    '%\bboys\b%' => 'laddies',
    '%\bchildren\b%' => 'little sandcrabs',
    '%\bkids\b%' => 'minnows',
    '%\bhim\b%' => 'that scurvey dog',
    '%\bher\b%' => 'that comely wench',
    '%\bhim\.\b%' => 'that drunken sailor',
    '%\bHe\b%' => 'The ornery cuss',
    '%\bShe\b%' => 'The winsome lass',
    "%\bhe's\b%" => 'he be',
    "%\bshe's\b%" => 'she be',
    '%\bwas\b%' => "were bein'",
    '%\bHey\b%' => 'Avast',
    '%\bher\.\b%' => 'that lovely lass',
    '%\bfood\b%' => 'chow',
    '%\bmoney\b%' => 'dubloons',
    '%\bdollars\b%' => 'pieces of eight',
    '%\bcents\b%' => 'shillings',
    '%\broad\b%' => 'sea',
    '%\broads\b%' => 'seas',
    '%\bstreet\b%' => 'river',
    '%\bstreets\b%' => 'rivers',
    '%\bhighway\b%' => 'ocean',
    '%\bhighways\b%' => 'oceans',
    '%\binterstate\b%' => 'high sea',
    '%\bprobably\b%' => 'likely',
    '%\bidea\b%' => 'notion',
    '%\bcar\b%' => 'boat',
    '%\bcars\b%' => 'boats',
    '%\btruck\b%' => 'schooner',
    '%\btrucks\b%' => 'schooners',
    '%\bSUV\b%' => 'ship',
    '%\bairplane\b%' => 'flying machine',
    '%\bjet\b%' => 'flying machine',
    '%\bmachine\b%' => 'contraption',
    '%\bdriving\b%' => 'sailing',
    '%\bunderstand\b%' => 'reckon',
    '%\bdrive\b%' => 'sail',
    '%\bdied\b%' => 'snuffed it',
    '/ing\b/' => "in'",
    '/ings\b/' => "in's",
    // These next two do cool random substitutions.
    '/(\.\s)/e' => 'avast("$0",3)',
    '/([!\?]\s)/e' => 'avast("$0",2)', // Greater chance after exclamation.
  );
  return array_merge($sopa_pirates_patterns, $patterns);
}

/**
 * Implementation of hook_filter_tips().
 */
function sopa_pirates_filter_tips($delta, $format, $long = FALSE) {
  return variable_get('sopa_pirates_display_tip', 1) ? "Avast! This website be taken over by SOPA pirates everyday. Yarr!" : '';
}

/**
 * Settings for the Pirate filter.
 */
function _sopa_pirates_filter_settings() {
  $form['sopa_pirates_filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('SOPA Pirates filter'),
  );
  $form['sopa_pirates_filter']['sopa_pirates_display_tip'] = array(
    '#title' => t('Display SOPA Pirates filter tip'),
    '#description' => t('In case you want to make SOPA pirates take over your site.'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('sopa_pirates_display_tip', 1),
  );
  return $form;
}

// Support function for pirate().
// this could probably be refactored to make it more generic, allowing
// different filters to pass their own patterns in.
function avast($stub = '', $chance = 5) {
  $shouts = array(
    ", avast$stub",
    "$stub Ahoy!",
    ", and a bottle of rum!",
    ", by Blackbeard's sword$stub",
    ", by Davy Jones' locker$stub",
    "$stub Walk the plank!",
    "$stub Aarrr!",
    "$stub Yaaarrrrr!",
    ", pass the grog!",
    ", and dinna spare the whip!",
    ", with a chest full of booty$stub",
    ", and a bucket o' chum$stub",
    ", we'll keel-haul ye!",
    "$stub Shiver me timbers!",
    "$stub And hoist the mainsail!",
    "$stub And swab the deck!",
    ", ye scurvey dog$stub",
    "$stub Fire the cannons!",
    ", to be sure$stub",
    ", I'll warrant ye$stub",
    ", on a dead man's chest!",
    "$stub Load the cannons!",
    "$stub Prepare to be boarded!",
    ", I'll warrant ye$stub",
    "$stub Ye'll be sleepin' with the fishes!",
    "$stub The sharks will eat well tonight!",
    "$stub Oho!",
    "$stub Fetch me spyglass!",
    ", shiver me timbers",
    ", yo ho, ho",
    ", ya bilge rat!",
    ", Get out of me rum!",
    ", feed the fishes",
    ", me Jolly Roger",
    ", Ya horn swogglin' scurvy cur!",
    ", Ya swabbie!",
    ", All Hands Hoay!",
    ", Avast me hearties!",
    ", Dance the Hempen Jig",
    ", Hornswaggle",
    ", Ya lily livered swabbie!",
  );
  
  shuffle($shouts);
  return (((1 == rand(1, $chance))?array_shift($shouts):$stub) . ' ');
}
